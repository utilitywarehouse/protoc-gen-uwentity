package main

import (
	"fmt"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"

	entitypb "github.com/utilitywarehouse/protoc-gen-uwentity/gen/uw/entity/v1"
)

var tmpl = `
// GetEntityIdentifier returns the value from the field marked as the identifier
func (m *%s) GetEntityIdentifier() string {
	if m != nil {
		return m.%s
	}
	return ""
}
`

type identifier struct {
	Msg        *protogen.Message
	Identifier *protogen.Field
}

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}
			if len(file.Messages) == 0 {
				continue
			}

			output := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".pb.uwentity.go", file.GoImportPath)
			output.P("// Code generated by protoc-gen-uwentity. DO NOT EDIT.")
			output.P("// source: ", file.Desc.Path())
			output.P("package ", file.GoPackageName)

			var idents []identifier
			for _, msg := range file.Messages {
				msgopts := msg.Desc.Options().(*descriptorpb.MessageOptions)
				if proto.GetExtension(msgopts, entitypb.E_Ignore).(bool) {
					continue
				}

				for _, field := range msg.Fields {
					fieldopts := field.Desc.Options().(*descriptorpb.FieldOptions)
					if !proto.GetExtension(fieldopts, entitypb.E_Identifier).(bool) {
						continue
					}

					kind := field.Desc.Kind()
					switch kind {
					case protoreflect.StringKind:
						idents = append(idents, identifier{
							Msg:        msg,
							Identifier: field,
						})
					default:
						return errors.Errorf("unsupported field type on %s: %s", msg.Desc.Name(), kind)
					}
					break
				}
			}

			if len(idents) == 0 {
				// file contains no identifiers
				output.Skip()
				continue
			}

			for _, ident := range idents {
				output.P(fmt.Sprintf(tmpl, ident.Msg.Desc.Name(), ident.Identifier.GoName))
			}
		}

		return nil
	})
}
